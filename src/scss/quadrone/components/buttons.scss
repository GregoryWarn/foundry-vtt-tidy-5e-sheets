/* Quadrone-style buttons */
:is(button, .button):where( :not(.header-control):not(.controls-dropdown .control)) {
  --button-padding-block-start: 0.5rem;
  --button-padding-block-end: 0.5rem;
  --button-padding-inline-start: 0.75rem;
  --button-padding-inline-end: 0.75rem;
  --icon-fill: var(--t5e-color-icon-button);

  /* Default button styles */
  --button-background: var(--t5e-component-field-background);
  --button-background-hover: var(--t5e-component-field-background-hover);
  --button-background-active: var(--t5e-component-field-background-active);
  --button-border: var(--t5e-component-field-border);
  --button-border-hover: var(--t5e-component-field-border-hover);
  --button-text: var(--t5e-color-text-default);
  --button-icon: var(--t5e-color-icon-button);
  --button-icon-hover: var(--t5e-color-icon-default);
  --button-shadow: var(--t5e-drop-shadow-field);
  --button-focus: 0px 0px 0px 2px var(--t5e-theme-color-default);


  display: inline-flex;
  width: unset;
  justify-content: center;
  align-items: center;
  gap: 0.25rem;
  flex-shrink: 0;
  border-radius: 0.125rem;
  border: none;
  background: transparent;
  color: var(--button-text);
  cursor: pointer;

  font: var(--t5e-font-label-medium);
  line-height: 0.875rem;

  box-shadow: var(--button-shadow);

  padding-inline-start: var(--button-padding-inline-start);
  padding-inline-end: var(--button-padding-inline-end);
  padding-block-end: 0.03125rem;
  min-height: var(--t5e-field-size-default);
  transition: all var(--t5e-transition-default);

  :where(i) {
    color: var(--icon-fill);
    transition: color var(--t5e-transition-default);
    margin: 0;
    font-size: var(--font-size-12);
    vertical-align: middle;
  }

  &:hover {
    :where(i) {
      color: var(--button-icon);
    }
  }

  &:focus-within {
    box-shadow: var(--button-focus);
  }

  &.active,
  &:active:not(:disabled) {
    --icon-fill: var(--button-icon);

    color: var(--button-text);
    border: 1px solid var(--button-border);
    background: var(--button-background);

    :where(i) {
      --icon-fill: var(--t5e-color-icon-light);
    }

    &:hover {
      background-color: var(--t5e-component-toggle-toggled-background-hover);
    }
  }

  &.button-secondary {
    border: 1px solid var(--button-border);
    background: var(--button-background);
    color: var(--button-text);

    &:hover {
      background: var(--button-background-hover);
      color: var(--button-text);
      border: 1px solid var(--button-border-hover);
      box-shadow: var(--button-shadow-hover);
    }
  }

  &:has(i, dnd5e-icon) {
    padding-inline-start: calc(var(--button-padding-inline-start) - 0.125rem);
  }

  &.button {
    background: var(--button-background);
    border: 1px solid var(--button-border);
    color: var(--button-text);
    --icon-color: var(--button-icon);

    &:hover:not(:disabled) {
      background: var(--button-background-hover);
      border: 1px solid var(--button-border-hover);

      :where(i) {
        color: var(--button-icon-hover);
      }
    }
  }

  &.button-tertiary {
    border-style: dashed;
    background: transparent;
    border-radius: 3px;
    box-shadow: none;

    &:hover {
      background: var(--t5e-component-field-background-hover);
    }
  }

  /* Toggle Buttons */
  &.button-toggle {
    --input-height: auto;

    &:has(.toggle:checked),
    &.active,
    &:active,
    &.include {
      --button-text: var(--t5e-color-palette-white);
      --button-icon: var(--t5e-color-icon-button);
      --button-icon-hover: var(--t5e-color-icon-default);
      --button-background: var(--t5e-theme-color-default);
      --button-background-hover: var(--t5e-theme-color-lighter);
      --button-border: var(--t5e-theme-color-darker);
      --button-border-hover: var(--t5e-theme-color-darker);
      --icon-fill: var(--t5e-color-icon-oninverse-default);
      color: var(--t5e-component-toggle-toggled-text);
      background: var(--t5e-component-toggle-toggled-background);

      :where(i) {
        --icon-fill: var(--t5e-color-icon-lighter);
        color: var(--icon-fill);
      }

      &:hover {
        background-color: var(--t5e-component-toggle-toggled-background-hover);

        :where(i) {
          --icon-fill: var(--t5e-color-icon-light);
        }
      }
    }

    &.disabled,
    &.exclude {
      --icon-fill: var(--t5e-color-text-lightest);
      font-style: italic;
      color: var(--t5e-color-text-lightest);
      box-shadow: none;
    }
  }

  /* Primary button */
  &.button-primary {
    --button-background: var(--t5e-theme-color-default);
    --button-background-hover: var(--t5e-theme-color-lighter);
    --button-border: var(--t5e-theme-color-darker);
    --button-text: var(--t5e-color-palette-white);
    --button-icon: var(--t5e-color-palette-white);

    --icon-fill: var(--t5e-color-palette-white);

    :where(i) {
      --icon-fill: var(--t5e-color-palette-white);
      // color: var(--icon-fill);
    }

    &:hover {
      background-color: var(--button-background-hover);

      :where(i) {
        --icon-fill: var(--t5e-color-icon-oninverse-default);
        color: var(--t5e-color-icon-oninverse-default);
      }
    }
  }

  /* Icon-only button */
  &.button-icon-only {
    --size: var(--t5e-field-size-default);
    align-items: center;
    justify-content: center;
    padding: 0;
    width: var(--size);
    height: var(--size);

    &.button-borderless {
      border-radius: 100%;

      &:hover {
        background: rgba(0, 0, 0, 0.12);
      }
    }
  }

  /* Borderless button */
  &.button-borderless {
    border-color: transparent;
    background: transparent;
    box-shadow: none;

    &:hover,
    &:focus,
    &:active,
    &:focus-within {
      background: transparent;
      border-color: transparent;
      box-shadow: none;
      // text-shadow: var(--t5e-drop-shadow-field);
      text-shadow: 0px 0px 6px var(--t5e-color-text-gold);
    }
  }

  &.disabled,
  &:disabled {
    cursor: default;
    background-color: transparent;
    border-color: transparent;

    &,
    i {
      color: var(--t5e-color-icon-disabled);
    }
  }

  &.disabled,
  &.exclude {
    --icon-fill: var(--t5e-color-text-lightest);
    font-style: italic;
    color: var(--t5e-color-text-lightest);
    box-shadow: none;
  }
}

/* Button Group */

.button-group {
  box-sizing: border-box;
  box-shadow: var(--t5e-drop-shadow-field);
  border: 0.0625rem solid var(--t5e-component-field-border);
  border-radius: 0.125rem;
  display: flex;
  flex-direction: row;
  gap: 0;
  height: var(--t5e-field-size-default);

  &:hover {
    box-shadow: var(--t5e-drop-shadow-field-hover);
  }

  :is(button, .button) {
    --button-padding-inline-start: 0.625rem;
    --button-padding-inline-end: 0.625rem;
    border-width: 0 0.0625rem 0 0;
    box-shadow: none;
    min-height: calc(var(--t5e-field-size-default) - 0.125rem);

    &:hover {
      border-width: 0 0.0625rem 0 0;
    }
  }

  :is(button, .button):last-child {
    border-width: 0;
  }

  :is(button, .button):not(:last-child):not(:first-child),
  :is(button, .button):first-child:not(:last-child) {
    // border-right: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  :is(button, .button):not(:last-child):not(:first-child) {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  :is(button, .button):last-child:not(:first-child) {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}

/* Header Controls */

:is(button, .button) {

  &.header-control,
  &.unbutton {
    width: unset;
    border: none;
    background: none;
    margin: 0;
    padding: 0;
    box-shadow: none;
    outline: none;
  }
}

:is(button, .button).header-control {
  font-weight: 900;
}

/* Button Dropdown */

.button-with-options-wrapper {
  position: relative;

  .with-options {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
    position: relative;

    &:hover .expand-indicator {
      color: var(--t5e-color-icon-default);
    }

    .expand-indicator {
      font-size: 0.5rem;
      position: absolute;
      right: 0.125rem;
      bottom: 0.0625rem;
      color: var(--t5e-color-gold);
    }

    &:is(.active, :active, .attention):not(.disabled) .expand-indicator {
      color: var(--t5e-color-icon-light);
    }
  }

  menu {
    position: absolute;
    margin: 0;
    padding: 0.5rem 0.75rem;
    top: 100%;
    width: auto;
    padding: 0.5rem 0.75rem;
    display: none;
    flex-direction: column;
    gap: 0.5rem;
    background: var(--t5e-component-card-darker);
    border: 1px solid var(--t5e-component-field-border);
    border-radius: 0.25rem;
    z-index: 2;
    white-space: nowrap;
    box-shadow: var(--t5e-drop-shadow-card);

    &.anchor-left {
      left: 0;
    }

    &.anchor-right {
      right: 0;
    }

    &.expanded {
      display: flex;
      gap: 0.5rem;
    }

    h4 {
      color: var(--t5e-color-text-lighter);
      font-size: 0.8125rem;
      font-weight: 500;
      line-height: normal;
    }

    label:has(input[type='radio']) {
      display: flex;
      gap: 0.5rem;
    }
  }
}

// Filter Button Menu - TODO: Discuss with hightouch where this should go and if any of this can be eliminated by existing or more appropriate classes / styles
.button-with-options-wrapper.filter-menu {
  // Question for hightouch: where should we put styles for filter menus?

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .filters {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;

    .button-toggle {
      text-transform: capitalize;
    }
  }

  menu.expanded {
    width: 20rem;
    border: 1px solid var(--t5e-component-field-border);
    display: flex;
    flex-direction: column;
    gap: 1.125rem;
    // TODO: Parchment background for light / ??? background for dark
    // Can we do some kind of special class that means "Use the textured background, whatever the theme?"
  }

  .clear-all-filters {
    margin-block-start: 0.625rem;
  }
}

.expand-button {
  .expand-button-indicator {
    transition: transform var(--t5e-transition-default);
  }

  &.collapsed .expand-button-indicator {
    transform: rotate(-90deg);
  }
}

.button-bar {
  display: flex;
  gap: var(--t5e-size-2x);
}



&.theme-dark {
  .button-with-options-wrapper menu {
    background: var(--t5e-component-card-darker);
  }

  :is(button, .button) {
    i {
      --icon-fill: var(--t5e-color-icon-button);
    }

    &.exclude {
      background: transparent;
    }

    &:hover {
      i {
        color: var(--t5e-color-icon-default);
      }
    }


    &.button-toggle,
    &.button-primary {
      --button-border: var(--t5e-component-field-border);

      i {
        --icon-fill: var(--t5e-color-icon-light);
      }

      &:hover {
        --button-border-hover: var(--t5e-component-field-border-hover);
      }
    }

    &.button-icon-only:hover {
      text-shadow: 0px 0px 6px var(--t5e-color-text-gold);
    }

    &.button-icon-only.button-borderless {
      &:hover {
        background: rgba(0, 0, 0, 1);
      }
    }

    &.disabled,
    &:disabled {
      --icon-fill: var(--t5e-color-icon-disabled);
    }

    &:focus-within:not(.button-toggle) {
      --button-border: var(--t5e-component-field-border-hover);
      --button-background: var(--t5e-component-field-background-hover);
    }

    &:focus-within:is(.button-toggle) {
      &:has(.toggle:checked) {
        --button-border: var(--t5e-component-toggle-toggled-border);
        --button-background: var(--t5e-theme-color-darker);
      }
    }

    &:focus-within:is(.button-primary) {
      --button-background: var(--t5e-theme-color-darker);
    }
  }
}